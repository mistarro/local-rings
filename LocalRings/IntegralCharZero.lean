import LocalRings.Basic
import LocalRings.Utils.NormalizedTrace

/-!
# Results for integral (algebraic) algebras

## Main results

* `isLocalRing_if_isLocallyGenerated_integral`: an integral (equivalently algebraic)
  algebra is local if it is locally generated.
-/

section Integral

variable (F A K₁ K₂ : Type*)
variable [Field F] [CommRing A] [Algebra F A]
variable [Field K₁] [Field K₂] [Algebra F K₁] [Algebra F K₂]

/-- Uniform definition of *algebraic and of characteristic zero* to be used in
    the generic theorem.
  -/
def UIntegralCharZero : Prop := Algebra.IsIntegral F A ∧ CharZero F

/-- For finite-dimensional extensions `K₁`, `K₂` of `F`, the `F`-algebra `K₁ × K₂`
    is not locally generated. -/
theorem notLocallyGenerated_KK_if_integral :
    UIntegralCharZero F K₁ → UIntegralCharZero F K₂ → ¬isLocallyGenerated F (K₁ × K₂) := by
  intro intK₁ intK₂ h
  haveI : Algebra.IsIntegral F K₁ := intK₁.1
  haveI : Algebra.IsIntegral F K₂ := intK₂.1
  haveI : CharZero F := intK₁.2
  let T : K₁ × K₂ →ₗ[F] F :=
    Algebra.normalizedTrace F K₁ ∘ₗ LinearMap.fst F K₁ K₂ -
      Algebra.normalizedTrace F K₂ ∘ₗ LinearMap.snd F K₁ K₂
  let U : Subspace F (K₁ × K₂) := LinearMap.ker T
  /- Show `T ≠ 0` (equivalent to `U ≠ K₁ × K₂`). -/
  have hU_ne_top : U ≠ ⊤ := by
    apply (not_congr <| LinearMap.ker_eq_top).mpr
    have h := Algebra.normalizedTrace_ne_zero F K₁
    simp [DFunLike.ne_iff] at h ⊢
    obtain ⟨x, hx⟩ := h
    use x, 0
    simpa [T]
  /- Show that `T` vanishes on local elements. -/
  have hT2 : localElements F (K₁ × K₂) ⊆ U := by
    intro α hα_loc
    have hα₁_int := Algebra.isIntegral_def.mp ‹_› α.1
    have hα₂_int := Algebra.isIntegral_def.mp ‹_› α.2
    have hα_minpoly := local_minpoly_eq (hα₁_int.pair hα₂_int) hα_loc
    simp [U, T, sub_eq_zero, Algebra.normalizedTrace_def]
    exact congrArg₂ (fun (x : ℕ) (y : F) ↦ (x : F)⁻¹ * y)
      /- finrank = finrank -/
      (IntermediateField.adjoin.finrank hα₂_int ▸
        hα_minpoly ▸
        IntermediateField.adjoin.finrank hα₁_int)
      /- trace = trace -/
      (trace_adjoinSimpleGen hα₂_int ▸
        hα_minpoly ▸
        trace_adjoinSimpleGen hα₁_int)
  /- Subspace generated by local elements is proper. -/
  have h_contra : Submodule.span F (localElements F (K₁ × K₂)) < ⊤ :=
    lt_of_le_of_lt
      (Submodule.span_le.mpr hT2) /- local span ≤ U -/
      (lt_top_iff_ne_top.mpr hU_ne_top) /- U < ⊤ -/
  exact (lt_top_iff_ne_top.mp h_contra) h

variable {F A} in
/-- Integral (equivalently algebraic) algebras are local if they are locally generated. -/
theorem isLocalRing_if_isLocallyGenerated_integral [Nontrivial A]
    [Algebra.IsIntegral F A] [CharZero F]
    (hLG : isLocallyGenerated F A) : IsLocalRing A :=
  haveI h : UIntegralCharZero F A := ⟨‹_›, ‹_›⟩
  isLocalAlgebra_if_isLocallyGenerated
    (fun f hf ⟨_, hChar⟩ ↦ ⟨Algebra.IsIntegral.of_surjective f hf, hChar⟩)
    notLocallyGenerated_KK_if_integral h hLG

end Integral
